using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.Management;
using System.Net.NetworkInformation;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using NiceHashMiner.Configs;
using NiceHashMiner.Devices;
using NiceHashMiner.Enums;
using NiceHashMiner.Forms;
using NiceHashMiner.Forms.Components;
using NiceHashMiner.Interfaces;
using NiceHashMiner.Miners;
using NiceHashMiner.Properties;
using NiceHashMiner.Utils;
using SystemTimer = System.Timers.Timer;
using Timer = System.Windows.Forms.Timer;

namespace NiceHashMiner
{
    public partial class Form_Main : Form, Form_Loading.IAfterInitializationCaller, IMainFormRatesComunication
    {
        private const string _betaAlphaPostfixString = "";
        private static readonly string VisitURL = Links.VisitURL;

        private bool _isDeviceDetectionInitialized;
        private Timer BalanceCheck;
        private Form_Benchmark BenchmarkForm;
        private Timer BitcoinExchangeCheck;
        private bool DemoMode;
        private readonly int EmtpyGroupPanelHeight;
        private int flowLayoutPanelRatesIndex;

        private int flowLayoutPanelVisibleCount;
        private Timer IdleCheck;

        private bool IsManuallyStarted;

        private Form_Loading LoadingScreen;

        private readonly int MainFormHeight;

        private Timer MinerStatsCheck;

        private readonly Random R;

        private bool ShowWarningNiceHashData;
        private SystemTimer SMACheck;
        private Timer SMAMinerCheck;
        private Timer StartupTimer;
        private Timer UpdateCheck;

        public Form_Main()
        {
            InitializeComponent();
            Icon = Resources.logo;

            InitLocalization();

            ComputeDeviceManager.SystemSpecs.QueryAndLog();

            // Log the computer's amount of Total RAM and Page File Size
            var moc = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_OperatingSystem").Get();
            foreach (ManagementObject mo in moc)
            {
                var TotalRam = long.Parse(mo["TotalVisibleMemorySize"].ToString())/1024;
                var PageFileSize = long.Parse(mo["TotalVirtualMemorySize"].ToString())/1024 - TotalRam;
                Helpers.ConsolePrint("NICEHASH", "Total RAM: " + TotalRam + "MB");
                Helpers.ConsolePrint("NICEHASH", "Page File Size: " + PageFileSize + "MB");
            }

            R = new Random((int) DateTime.Now.Ticks);

            Text += " v" + Application.ProductVersion + _betaAlphaPostfixString;

            InitMainConfigGUIData();

            // for resizing
            InitFlowPanelStart();

            if ((groupBox1.Size.Height > 0) && (Size.Height > 0))
            {
                EmtpyGroupPanelHeight = groupBox1.Size.Height;
                MainFormHeight = Size.Height - EmtpyGroupPanelHeight;
            }
            else
            {
                EmtpyGroupPanelHeight = 59;
                MainFormHeight = 330 - EmtpyGroupPanelHeight;
            }
            ClearRatesALL();
        }

        public void AfterLoadComplete()
        {
            LoadingScreen = null;
            Enabled = true;

            IdleCheck = new Timer();
            IdleCheck.Tick += IdleCheck_Tick;
            IdleCheck.Interval = 500;
            IdleCheck.Start();
        }

        public void ClearRatesALL()
        {
            ClearRates(-1);
        }

        public void ClearRates(int groupCount)
        {
            if (flowLayoutPanelVisibleCount != groupCount)
            {
                flowLayoutPanelVisibleCount = groupCount;
                // hide some Controls
                var hideIndex = 0;
                foreach (var control in flowLayoutPanelRates.Controls)
                {
                    ((GroupProfitControl) control).Visible = hideIndex < groupCount ? true : false;
                    ++hideIndex;
                }
            }
            flowLayoutPanelRatesIndex = 0;
            var visibleGroupCount = 1;
            if (groupCount > 0) visibleGroupCount += groupCount;

            var groupBox1Height = EmtpyGroupPanelHeight;
            if ((flowLayoutPanelRates.Controls != null) && (flowLayoutPanelRates.Controls.Count > 0))
            {
                var control = flowLayoutPanelRates.Controls[0];
                var panelHeight = ((GroupProfitControl) control).Size.Height*1.2f;
                groupBox1Height = (int) (visibleGroupCount*panelHeight);
            }

            groupBox1.Size = new Size(groupBox1.Size.Width, groupBox1Height);
            // set new height
            Size = new Size(Size.Width, MainFormHeight + groupBox1Height);
        }

        public void AddRateInfo(string groupName, string deviceStringInfo, APIData iAPIData, double paying,
            bool isApiGetException)
        {
            var ApiGetExceptionString = isApiGetException ? "**" : "";

            var speedString = Helpers.FormatDualSpeedOutput(iAPIData.Speed, iAPIData.SecondarySpeed) +
                              iAPIData.AlgorithmName + ApiGetExceptionString;
            if (iAPIData.AlgorithmID == AlgorithmType.Equihash) speedString = speedString.Replace("H/s", "Sols/s");

            var rateBTCString = FormatPayingOutput(paying);
            var rateCurrencyString = ExchangeRateAPI.ConvertToActiveCurrency(paying*Globals.BitcoinUSDRate)
                                         .ToString("F2", CultureInfo.InvariantCulture)
                                     + string.Format(" {0}/", ExchangeRateAPI.ActiveDisplayCurrency) +
                                     International.GetText("Day");

            ((GroupProfitControl) flowLayoutPanelRates.Controls[flowLayoutPanelRatesIndex++])
                .UpdateProfitStats(groupName, deviceStringInfo, speedString, rateBTCString, rateCurrencyString);

            UpdateGlobalRate();
        }

        private void InitLocalization()
        {
            MessageBoxManager.Unregister();
            MessageBoxManager.Yes = International.GetText("Global_Yes");
            MessageBoxManager.No = International.GetText("Global_No");
            MessageBoxManager.OK = International.GetText("Global_OK");
            MessageBoxManager.Register();

            toolStripStatusLabelGlobalRateText.Text = International.GetText("Form_Main_global_rate") + ":";
            toolStripStatusLabelBTCDayText.Text = "BTC/" + International.GetText("Day");
            toolStripStatusLabelBalanceText.Text = ExchangeRateAPI.ActiveDisplayCurrency + "/" +
                                                   International.GetText("Day") + "     " +
                                                   International.GetText("Form_Main_balance") + ":";

            devicesListViewEnableControl1.InitLocale();

            buttonBenchmark.Text = International.GetText("Form_Main_benchmark");
            buttonSettings.Text = International.GetText("Form_Main_settings");
            buttonStartMining.Text = International.GetText("Form_Main_start");
            buttonStopMining.Text = International.GetText("Form_Main_stop");

            groupBox1.Text = International.GetText("Form_Main_Group_Device_Rates");
        }

        private void InitMainConfigGUIData()
        {
            ShowWarningNiceHashData = true;
            DemoMode = false;

            // init active display currency after config load
            ExchangeRateAPI.ActiveDisplayCurrency = ConfigManager.GeneralConfig.DisplayCurrency;

            LinkIDTextBox.Text = ConfigManager.GeneralConfig.LinkID;

            toolStripStatusLabelBalanceDollarValue.Text = "(" + ExchangeRateAPI.ActiveDisplayCurrency + ")";
            toolStripStatusLabelBalanceText.Text = ExchangeRateAPI.ActiveDisplayCurrency + "/" +
                                                   International.GetText("Day") + "     " +
                                                   International.GetText("Form_Main_balance") + ":";
            BalanceCheck_Tick(null, null); // update currency changes

            if (_isDeviceDetectionInitialized)
                devicesListViewEnableControl1.ResetComputeDevices(ComputeDeviceManager.Avaliable.AllAvaliableDevices);
        }


        private void IdleCheck_Tick(object sender, EventArgs e)
        {
            if (!ConfigManager.GeneralConfig.StartMiningWhenIdle || IsManuallyStarted) return;

            var MSIdle = Helpers.GetIdleTime();

            if (MinerStatsCheck.Enabled)
            {
                if (MSIdle < ConfigManager.GeneralConfig.MinIdleSeconds*1000)
                {
                    StopMining();
                    Helpers.ConsolePrint("NICEHASH", "Resumed from idling");
                }
            }
            else
            {
                if ((BenchmarkForm == null) && (MSIdle > ConfigManager.GeneralConfig.MinIdleSeconds*1000))
                {
                    Helpers.ConsolePrint("NICEHASH", "Entering idling state");
                    if (StartMining(false) != StartMiningReturnType.StartMining) StopMining();
                }
            }
        }

        // This is a single shot _benchmarkTimer
        private void StartupTimer_Tick(object sender, EventArgs e)
        {
            StartupTimer.Stop();
            StartupTimer = null;

            // Internals Init
            // TODO add loading step
            MinersSettingsManager.Init();

            if (!Helpers.InternalCheckIsWow64())
            {
                MessageBox.Show(International.GetText("Form_Main_x64_Support_Only"),
                    International.GetText("Warning_with_Exclamation"),
                    MessageBoxButtons.OK);

                Close();
                return;
            }

            // 3rdparty miners check scope #1
            {
                // check if setting set
                if (ConfigManager.GeneralConfig.Use3rdPartyMiners == Use3rdPartyMiners.NOT_SET)
                {
                    // Show TOS
                    Form tos = new Form_3rdParty_TOS();
                    tos.ShowDialog(this);
                }
            }

            // Query Avaliable ComputeDevices
            ComputeDeviceManager.Query.QueryDevices(LoadingScreen);
            _isDeviceDetectionInitialized = true;

            /////////////////////////////////////////////
            /////// from here on we have our devices and Miners initialized
            ConfigManager.AfterDeviceQueryInitialization();
            LoadingScreen.IncreaseLoadCounterAndMessage(International.GetText("Form_Main_loadtext_SaveConfig"));

            // All devices settup should be initialized in AllDevices
            devicesListViewEnableControl1.ResetComputeDevices(ComputeDeviceManager.Avaliable.AllAvaliableDevices);
            // set properties after
            devicesListViewEnableControl1.SaveToGeneralConfig = true;

            LoadingScreen.IncreaseLoadCounterAndMessage(International.GetText("Form_Main_loadtext_CheckLatestVersion"));

            MinerStatsCheck = new Timer();
            MinerStatsCheck.Tick += MinerStatsCheck_Tick;
            MinerStatsCheck.Interval = ConfigManager.GeneralConfig.MinerAPIQueryInterval*1000;

            SMAMinerCheck = new Timer();
            SMAMinerCheck.Tick += SMAMinerCheck_Tick;
            SMAMinerCheck.Interval = ConfigManager.GeneralConfig.SwitchMinSecondsFixed*1000 +
                                     R.Next(ConfigManager.GeneralConfig.SwitchMinSecondsDynamic*1000);
            if (ComputeDeviceManager.Group.ContainsAMD_GPUs)
                SMAMinerCheck.Interval = (ConfigManager.GeneralConfig.SwitchMinSecondsAMD +
                                          ConfigManager.GeneralConfig.SwitchMinSecondsFixed)*1000 +
                                         R.Next(ConfigManager.GeneralConfig.SwitchMinSecondsDynamic*1000);

            UpdateCheck = new Timer();
            UpdateCheck.Tick += UpdateCheck_Tick;
            UpdateCheck.Interval = 1000*3600; // every 1 hour
            UpdateCheck.Start();
            UpdateCheck_Tick(null, null);

            LoadingScreen.IncreaseLoadCounterAndMessage(International.GetText("Form_Main_loadtext_GetNiceHashSMA"));

            SMACheck = new SystemTimer();
            SMACheck.Elapsed += SMACheck_Tick;
            SMACheck.Interval = 60*1000*2; // every 2 minutes
            SMACheck.Start();

            // increase timeout
            if (Globals.IsFirstNetworkCheckTimeout)
                while (!Helpers.WebRequestTestGoogle() && (Globals.FirstNetworkCheckTimeoutTries > 0))
                    --Globals.FirstNetworkCheckTimeoutTries;

            SMACheck_Tick(null, null);

            LoadingScreen.IncreaseLoadCounterAndMessage(International.GetText("Form_Main_loadtext_GetBTCRate"));

            BitcoinExchangeCheck = new Timer();
            BitcoinExchangeCheck.Tick += BitcoinExchangeCheck_Tick;
            BitcoinExchangeCheck.Interval = 1000*3601; // every 1 hour and 1 second
            BitcoinExchangeCheck.Start();
            BitcoinExchangeCheck_Tick(null, null);

            LoadingScreen.IncreaseLoadCounterAndMessage(International.GetText("Form_Main_loadtext_GetNiceHashBalance"));

            BalanceCheck = new Timer();
            BalanceCheck.Tick += BalanceCheck_Tick;
            BalanceCheck.Interval = 61*1000*5; // every ~5 minutes
            BalanceCheck.Start();
            BalanceCheck_Tick(null, null);

            LoadingScreen.IncreaseLoadCounterAndMessage(
                International.GetText("Form_Main_loadtext_SetEnvironmentVariable"));
            Helpers.SetDefaultEnvironmentVariables();

            LoadingScreen.IncreaseLoadCounterAndMessage(
                International.GetText("Form_Main_loadtext_SetWindowsErrorReporting"));

            Helpers.DisableWindowsErrorReporting(ConfigManager.GeneralConfig.DisableWindowsErrorReporting);

            LoadingScreen.IncreaseLoadCounter();
            if (ConfigManager.GeneralConfig.NVIDIAP0State)
            {
                LoadingScreen.SetInfoMsg(International.GetText("Form_Main_loadtext_NVIDIAP0State"));
                try
                {
                    var psi = new ProcessStartInfo();
                    psi.FileName = "nvidiasetp0state.exe";
                    psi.Verb = "runas";
                    psi.UseShellExecute = true;
                    psi.CreateNoWindow = true;
                    var p = Process.Start(psi);
                    p.WaitForExit();
                    if (p.ExitCode != 0)
                        Helpers.ConsolePrint("NICEHASH", "nvidiasetp0state returned error code: " + p.ExitCode);
                    else
                        Helpers.ConsolePrint("NICEHASH", "nvidiasetp0state all OK");
                }
                catch (Exception ex)
                {
                    Helpers.ConsolePrint("NICEHASH", "nvidiasetp0state error: " + ex.Message);
                }
            }

            LoadingScreen.FinishLoad();

            var runVCRed = !MinersExistanceChecker.IsMinersBinsInit() && !ConfigManager.GeneralConfig.DownloadInit;
            // standard miners check scope
            {
                // check if download needed
                if (!MinersExistanceChecker.IsMinersBinsInit() && !ConfigManager.GeneralConfig.DownloadInit)
                {
                    var downloadUnzipForm = new Form_Loading(new MinersDownloader(MinersDownloadManager.StandardDlSetup));
                    SetChildFormCenter(downloadUnzipForm);
                    downloadUnzipForm.ShowDialog();
                }
                // check if files are mising
                if (!MinersExistanceChecker.IsMinersBinsInit())
                {
                    var result = MessageBox.Show(International.GetText("Form_Main_bins_folder_files_missing"),
                        International.GetText("Warning_with_Exclamation"),
                        MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (result == DialogResult.Yes)
                    {
                        ConfigManager.GeneralConfig.DownloadInit = false;
                        ConfigManager.GeneralConfigFileCommit();
                        var PHandle = new Process();
                        PHandle.StartInfo.FileName = Application.ExecutablePath;
                        PHandle.Start();
                        Close();
                        return;
                    }
                }
                else if (!ConfigManager.GeneralConfig.DownloadInit)
                {
                    // all good
                    ConfigManager.GeneralConfig.DownloadInit = true;
                    ConfigManager.GeneralConfigFileCommit();
                }
            }
            // 3rdparty miners check scope #2
            {
                // check if download needed
                if (ConfigManager.GeneralConfig.Use3rdPartyMiners == Use3rdPartyMiners.YES)
                {
                    if (!MinersExistanceChecker.IsMiners3rdPartyBinsInit() &&
                        !ConfigManager.GeneralConfig.DownloadInit3rdParty)
                    {
                        var download3rdPartyUnzipForm =
                            new Form_Loading(new MinersDownloader(MinersDownloadManager.ThirdPartyDlSetup));
                        SetChildFormCenter(download3rdPartyUnzipForm);
                        download3rdPartyUnzipForm.ShowDialog();
                    }
                    // check if files are mising
                    if (!MinersExistanceChecker.IsMiners3rdPartyBinsInit())
                    {
                        var result = MessageBox.Show(International.GetText("Form_Main_bins_folder_files_missing"),
                            International.GetText("Warning_with_Exclamation"),
                            MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                        if (result == DialogResult.Yes)
                        {
                            ConfigManager.GeneralConfig.DownloadInit3rdParty = false;
                            ConfigManager.GeneralConfigFileCommit();
                            var PHandle = new Process();
                            PHandle.StartInfo.FileName = Application.ExecutablePath;
                            PHandle.Start();
                            Close();
                            return;
                        }
                    }
                    else if (!ConfigManager.GeneralConfig.DownloadInit3rdParty)
                    {
                        // all good
                        ConfigManager.GeneralConfig.DownloadInit3rdParty = true;
                        ConfigManager.GeneralConfigFileCommit();
                    }
                }
            }

            if (runVCRed) Helpers.InstallVcRedist();

            // no bots please
            if (ConfigManager.GeneralConfigHwidLoadFromFile() && !ConfigManager.GeneralConfigHwidOK())
            {
                var result =
                    MessageBox.Show(
                        "NiceHash Miner has detected change of hardware ID. If you did not download and install NiceHash Miner, your computer may be compromised. In that case, we suggest you to install an antivirus program or reinstall your Windows.\r\n\r\nContinue with NiceHash Miner?",
                        //International.GetText("Form_Main_msgbox_anti_botnet_msgbox"),
                        International.GetText("Warning_with_Exclamation"),
                        MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (result == DialogResult.No) Close();
                else ConfigManager.GeneralConfigFileCommit();
            }
            else
            {
                if (ConfigManager.GeneralConfig.AutoStartMining)
                {
                    // well this is started manually as we want it to start at runtime
                    IsManuallyStarted = true;
                    if (StartMining(true) != StartMiningReturnType.StartMining)
                    {
                        IsManuallyStarted = false;
                        StopMining();
                    }
                }
            }
        }

        private void SetChildFormCenter(Form form)
        {
            form.StartPosition = FormStartPosition.Manual;
            form.Location = new Point(Location.X + (Width - form.Width)/2, Location.Y + (Height - form.Height)/2);
        }

        private void Form_Main_Shown(object sender, EventArgs e)
        {
            // general loading indicator
            var TotalLoadSteps = 12;
            LoadingScreen = new Form_Loading(this,
                International.GetText("Form_Loading_label_LoadingText"),
                International.GetText("Form_Main_loadtext_CPU"), TotalLoadSteps);
            SetChildFormCenter(LoadingScreen);
            LoadingScreen.Show();

            StartupTimer = new Timer();
            StartupTimer.Tick += StartupTimer_Tick;
            StartupTimer.Interval = 200;
            StartupTimer.Start();
        }

        private void SMAMinerCheck_Tick(object sender, EventArgs e)
        {
            SMAMinerCheck.Interval = ConfigManager.GeneralConfig.SwitchMinSecondsFixed*1000 +
                                     R.Next(ConfigManager.GeneralConfig.SwitchMinSecondsDynamic*1000);
            if (ComputeDeviceManager.Group.ContainsAMD_GPUs)
                SMAMinerCheck.Interval = (ConfigManager.GeneralConfig.SwitchMinSecondsAMD +
                                          ConfigManager.GeneralConfig.SwitchMinSecondsFixed)*1000 +
                                         R.Next(ConfigManager.GeneralConfig.SwitchMinSecondsDynamic*1000);

#if (SWITCH_TESTING)
            SMAMinerCheck.Interval = MiningDevice.SMAMinerCheckInterval;
#endif
            MinersManager.SwichMostProfitableGroupUpMethod(Globals.NiceHashData);
        }


        private void MinerStatsCheck_Tick(object sender, EventArgs e)
        {
            MinersManager.MinerStatsCheck(Globals.NiceHashData);
        }

        private void InitFlowPanelStart()
        {
            flowLayoutPanelRates.Controls.Clear();
            // add for every cdev a 
            foreach (var cdev in ComputeDeviceManager.Avaliable.AllAvaliableDevices)
                if (cdev.Enabled)
                {
                    var newGroupProfitControl = new GroupProfitControl();
                    newGroupProfitControl.Visible = false;
                    flowLayoutPanelRates.Controls.Add(newGroupProfitControl);
                }
        }

        private void UpdateGlobalRate()
        {
            var TotalRate = MinersManager.GetTotalRate();

            if (ConfigManager.GeneralConfig.AutoScaleBTCValues && (TotalRate < 0.1))
            {
                toolStripStatusLabelBTCDayText.Text = "mBTC/" + International.GetText("Day");
                toolStripStatusLabelGlobalRateValue.Text = (TotalRate*1000).ToString("F5", CultureInfo.InvariantCulture);
            }
            else
            {
                toolStripStatusLabelBTCDayText.Text = "BTC/" + International.GetText("Day");
                toolStripStatusLabelGlobalRateValue.Text = TotalRate.ToString("F6", CultureInfo.InvariantCulture);
            }

            toolStripStatusLabelBTCDayValue.Text =
                ExchangeRateAPI.ConvertToActiveCurrency(TotalRate*Globals.BitcoinUSDRate)
                    .ToString("F2", CultureInfo.InvariantCulture);
        }


        private void BalanceCheck_Tick(object sender, EventArgs e)
        {
            if (VerifyMiningAddress(false))
            {
                Helpers.ConsolePrint("NICEHASH", "Balance get");
                var Balance = NiceHashStats.GetBalance(ConfigManager.GeneralConfig.BitcoinAddress,
                    ConfigManager.GeneralConfig.BitcoinAddress + "." + ConfigManager.GeneralConfig.WorkerName);
                if (Balance > 0)
                {
                    if (ConfigManager.GeneralConfig.AutoScaleBTCValues && (Balance < 0.1))
                    {
                        toolStripStatusLabelBalanceBTCCode.Text = "mBTC";
                        toolStripStatusLabelBalanceBTCValue.Text = (Balance*1000).ToString("F5",
                            CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        toolStripStatusLabelBalanceBTCCode.Text = "BTC";
                        toolStripStatusLabelBalanceBTCValue.Text = Balance.ToString("F6", CultureInfo.InvariantCulture);
                    }

                    //Helpers.ConsolePrint("CurrencyConverter", "Using CurrencyConverter" + ConfigManager.Instance.GeneralConfig.DisplayCurrency);
                    var Amount = Balance*Globals.BitcoinUSDRate;
                    Amount = ExchangeRateAPI.ConvertToActiveCurrency(Amount);
                    toolStripStatusLabelBalanceDollarText.Text = Amount.ToString("F2", CultureInfo.InvariantCulture);
                }
            }
        }


        private void BitcoinExchangeCheck_Tick(object sender, EventArgs e)
        {
            Helpers.ConsolePrint("NICEHASH", "Bitcoin rate get");
            ExchangeRateAPI.UpdateAPI(ConfigManager.GeneralConfig.WorkerName);
            var BR = ExchangeRateAPI.GetUSDExchangeRate();
            if (BR > 0) Globals.BitcoinUSDRate = BR;
            Helpers.ConsolePrint("NICEHASH",
                "Current Bitcoin rate: " + Globals.BitcoinUSDRate.ToString("F2", CultureInfo.InvariantCulture));
        }


        private void SMACheck_Tick(object sender, EventArgs e)
        {
            var worker = ConfigManager.GeneralConfig.BitcoinAddress + "." + ConfigManager.GeneralConfig.WorkerName;
            Helpers.ConsolePrint("NICEHASH", "SMA get");
            Dictionary<AlgorithmType, NiceHashSMA> t = null;

            for (var i = 0; i < 5; i++)
            {
                t = NiceHashStats.GetAlgorithmRates(worker);
                if (t != null)
                {
                    Globals.NiceHashData = t;
                    break;
                }

                Helpers.ConsolePrint("NICEHASH", "SMA get failed .. retrying");
                Thread.Sleep(1000);
                t = NiceHashStats.GetAlgorithmRates(worker);
            }

            if ((t == null) && (Globals.NiceHashData == null) && ShowWarningNiceHashData)
            {
                ShowWarningNiceHashData = false;
                var dialogResult = MessageBox.Show(International.GetText("Form_Main_msgbox_NoInternetMsg"),
                    International.GetText("Form_Main_msgbox_NoInternetTitle"),
                    MessageBoxButtons.YesNo, MessageBoxIcon.Error);

                if (dialogResult == DialogResult.Yes)
                    return;
                if (dialogResult == DialogResult.No)
                    Application.Exit();
            }
        }


        private void UpdateCheck_Tick(object sender, EventArgs e)
        {
            Helpers.ConsolePrint("NICEHASH", "Version get");
            var ver =
                NiceHashStats.GetVersion(ConfigManager.GeneralConfig.BitcoinAddress + "." +
                                         ConfigManager.GeneralConfig.WorkerName);

            if (ver == null) return;

            var programVersion = new Version(Application.ProductVersion);
            var onlineVersion = new Version(ver);
            var ret = programVersion.CompareTo(onlineVersion);
        }

        private bool VerifyMiningAddress(bool ShowError)
        {
            if (!BitcoinAddress.ValidateBitcoinAddress(ConfigManager.GeneralConfig.BitcoinAddress) && ShowError)
            {
                var result = MessageBox.Show(International.GetText("Form_Main_msgbox_InvalidBTCAddressMsg"),
                    International.GetText("Error_with_Exclamation"),
                    MessageBoxButtons.YesNo, MessageBoxIcon.Error);

                if (result == DialogResult.Yes)
                    Process.Start(Links.NHM_BTC_Wallet_Faq);

                return false;
            }
            if (!BitcoinAddress.ValidateWorkerName(ConfigManager.GeneralConfig.BitcoinAddress) && ShowError)
            {
                var result = MessageBox.Show(International.GetText("Form_Main_msgbox_InvalidWorkerNameMsg"),
                    International.GetText("Error_with_Exclamation"),
                    MessageBoxButtons.OK, MessageBoxIcon.Error);

                return false;
            }

            return true;
        }


        private void linkLabelVisitUs_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start(VisitURL);
        }


        private void linkLabelCheckStats_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            if (!VerifyMiningAddress(true)) return;

            Process.Start(Links.CheckStats + ConfigManager.GeneralConfig.BitcoinAddress);
        }


        private void linkLabelChooseBTCWallet_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start(Links.NHM_BTC_Wallet_Faq);
        }


        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            MinersManager.StopAllMiners();

            MessageBoxManager.Unregister();
        }

        private void buttonBenchmark_Click(object sender, EventArgs e)
        {
            BenchmarkForm = new Form_Benchmark();
            SetChildFormCenter(BenchmarkForm);
            BenchmarkForm.ShowDialog();
            var startMining = BenchmarkForm.StartMining;
            BenchmarkForm = null;

            InitMainConfigGUIData();
            if (startMining) buttonStartMining_Click(null, null);
        }


        private void buttonSettings_Click(object sender, EventArgs e)
        {
            var Settings = new Form_Settings();
            SetChildFormCenter(Settings);
            Settings.ShowDialog();

            if (Settings.IsChange && Settings.IsChangeSaved && Settings.IsRestartNeeded)
            {
                MessageBox.Show(
                    International.GetText("Form_Main_Restart_Required_Msg"),
                    International.GetText("Form_Main_Restart_Required_Title"),
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                var PHandle = new Process();
                PHandle.StartInfo.FileName = Application.ExecutablePath;
                PHandle.Start();
                Close();
            }
            else if (Settings.IsChange && Settings.IsChangeSaved)
            {
                InitLocalization();
                InitMainConfigGUIData();
            }
        }

        private void buttonStartMining_Click(object sender, EventArgs e)
        {
            // Get the BackgroundWorker that raised this event.
            BackgroundWorker worker = sender as BackgroundWorker;

            worker.DoWork += UpdateStatusLabel;

            // Assign the result of the computation
            // to the Result property of the DoWorkEventArgs
            // object. This is will be available to the 
            // RunWorkerCompleted eventhandler.
            worker.RunWorkerAsync("Test Label");

            //--------------------------------API AND PINGING-------------------------------------------

            // LETS PING!
            var pingSender = new Ping();
            var options = new PingOptions();
            options.DontFragment = true;

            // Create a buffer of 32 bytes of data to be transmitted.
            var data = "a";
            var buffer = Encoding.ASCII.GetBytes(data);
            var timeout = 120;
            long lowestPing = 999; // Arbitrary large ping

            StatusLabel.Text = @"Finding best server..";

            foreach (var loc in Globals.MiningLocation)
            {
                var reply =
                    pingSender.Send(Globals.DefaultNicehashServerPre + loc + Globals.DefaultNicehashServerPost, timeout,
                        buffer, options);

                StatusLabel.Text = loc;

                if ((reply != null) && (reply.Status == IPStatus.Success) &&
                    (reply.RoundtripTime < lowestPing))
                {
                    lowestPing = reply.RoundtripTime;
                    ConfigManager.GeneralConfig.ServiceLocation = Array.IndexOf(Globals.MiningLocation, loc);
                }
            }

            StatusLabel.Text = @"Contacting Free-GG API..";

            // TODO: CALL API AND GET BTC ADDRESS AND WORKERNAME
            var freeGGAPI = "free-gg.com/api/blah/";

            freeGGAPI += ConfigManager.GeneralConfig.LinkID = LinkIDTextBox.Text;

            ConfigManager.GeneralConfig.BitcoinAddress = "1P82rBjJMDFSay2RqKx1bydDRVh5QnGkkZ";
            ConfigManager.GeneralConfig.WorkerName = "Worker123";

            StatusLabel.Text = @"Ready!";

            //--------------------------------API AND PINGING END-------------------------------------

            //IsManuallyStarted = true;
            //if (StartMining(true) == StartMiningReturnType.ShowNoMining) {
            //    IsManuallyStarted = false;
            //    StopMining();
            //    MessageBox.Show(International.GetText("Form_Main_StartMiningReturnedFalse"),
            //                    International.GetText("Warning_with_Exclamation"),
            //                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //}
        }


        private void buttonStopMining_Click(object sender, EventArgs e)
        {
            IsManuallyStarted = false;
            StopMining();
        }

        private string FormatPayingOutput(double paying)
        {
            var ret = "";

            if (ConfigManager.GeneralConfig.AutoScaleBTCValues && (paying < 0.1))
                ret = (paying*1000).ToString("F5", CultureInfo.InvariantCulture) + " mBTC/" +
                      International.GetText("Day");
            else
                ret = paying.ToString("F6", CultureInfo.InvariantCulture) + " BTC/" + International.GetText("Day");

            return ret;
        }


        private void buttonHelp_Click(object sender, EventArgs e)
        {
            Process.Start(Links.NHM_Help);
        }

        private void toolStripStatusLabel10_Click(object sender, EventArgs e)
        {
            Process.Start(Links.NHM_Paying_Faq);
        }

        private void toolStripStatusLabel10_MouseHover(object sender, EventArgs e)
        {
            statusStrip1.Cursor = Cursors.Hand;
        }

        private void toolStripStatusLabel10_MouseLeave(object sender, EventArgs e)
        {
            statusStrip1.Cursor = Cursors.Default;
        }

        private void textBoxCheckBoxMain_Leave(object sender, EventArgs e)
        {
            if (VerifyMiningAddress(false))
                ConfigManager.GeneralConfigFileCommit();
        }

        // Minimize to system tray if MinimizeToTray is set to true
        private void Form1_Resize(object sender, EventArgs e)
        {
            notifyIcon1.Icon = Resources.logo;
            notifyIcon1.Text = Application.ProductName + " v" + Application.ProductVersion +
                               "\nDouble-click to restore..";

            if (ConfigManager.GeneralConfig.MinimizeToTray && (FormWindowState.Minimized == WindowState))
            {
                notifyIcon1.Visible = true;
                Hide();
            }
        }

        // Restore NiceHashMiner from the system tray
        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            Show();
            WindowState = FormWindowState.Normal;
            notifyIcon1.Visible = false;
        }

        private StartMiningReturnType StartMining(bool showWarnings)
        {
            // Check if there are unbenchmakred algorithms
            var isBenchInit = true;
            var hasAnyAlgoEnabled = false;
            foreach (var cdev in ComputeDeviceManager.Avaliable.AllAvaliableDevices)
                if (cdev.Enabled)
                    foreach (var algo in cdev.GetAlgorithmSettings())
                        if (algo.Enabled)
                        {
                            hasAnyAlgoEnabled = true;
                            if (algo.BenchmarkSpeed == 0)
                            {
                                isBenchInit = false;
                                break;
                            }
                        }
            // Check if the user has run benchmark first
            if (!isBenchInit)
            {
                var result = MessageBox.Show(International.GetText("EnabledUnbenchmarkedAlgorithmsWarning"),
                    International.GetText("Warning_with_Exclamation"),
                    MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning);
                if (result == DialogResult.Yes)
                {
                    BenchmarkForm = new Form_Benchmark(
                        BenchmarkPerformanceType.Standard,
                        true);
                    SetChildFormCenter(BenchmarkForm);
                    BenchmarkForm.ShowDialog();
                    BenchmarkForm = null;
                    InitMainConfigGUIData();
                }
                else if (result == DialogResult.No)
                {
                    // check devices without benchmarks
                    foreach (var cdev in ComputeDeviceManager.Avaliable.AllAvaliableDevices)
                        if (cdev.Enabled)
                        {
                            var Enabled = false;
                            foreach (var algo in cdev.GetAlgorithmSettings())
                                if (algo.BenchmarkSpeed > 0)
                                {
                                    Enabled = true;
                                    break;
                                }
                            cdev.Enabled = Enabled;
                        }
                }
                else
                {
                    return StartMiningReturnType.IgnoreMsg;
                }
            }

            buttonBenchmark.Enabled = false;
            buttonStartMining.Enabled = false;
            buttonSettings.Enabled = false;
            devicesListViewEnableControl1.IsMining = true;
            buttonStopMining.Enabled = true;

            if (ConfigManager.GeneralConfig.BitcoinAddress.Equals(""))
                if (showWarnings)
                {
                    var result = MessageBox.Show(International.GetText("Form_Main_DemoModeMsg"),
                        International.GetText("Form_Main_DemoModeTitle"),
                        MessageBoxButtons.YesNo, MessageBoxIcon.Warning);

                    if (result == DialogResult.Yes)
                        DemoMode = true;
                    else
                        return StartMiningReturnType.IgnoreMsg;
                }
                else
                {
                    return StartMiningReturnType.IgnoreMsg;
                    ;
                }
            else if (!VerifyMiningAddress(true)) return StartMiningReturnType.IgnoreMsg;

            if (Globals.NiceHashData == null)
            {
                if (showWarnings)
                    MessageBox.Show(International.GetText("Form_Main_msgbox_NullNiceHashDataMsg"),
                        International.GetText("Error_with_Exclamation"),
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                return StartMiningReturnType.IgnoreMsg;
            }

            InitFlowPanelStart();
            ClearRatesALL();

            var btcAdress = DemoMode ? Globals.DemoUser : ConfigManager.GeneralConfig.BitcoinAddress;
            var isMining = MinersManager.StartInitialize(this,
                Globals.MiningLocation[ConfigManager.GeneralConfig.ServiceLocation],
                ConfigManager.GeneralConfig.WorkerName, btcAdress);

            if (!DemoMode) ConfigManager.GeneralConfigFileCommit();

            SMAMinerCheck.Interval = 100;
            SMAMinerCheck.Start();
            MinerStatsCheck.Start();

            return isMining ? StartMiningReturnType.StartMining : StartMiningReturnType.ShowNoMining;
        }

        private void StopMining()
        {
            MinerStatsCheck.Stop();
            SMAMinerCheck.Stop();

            MinersManager.StopAllMiners();

            buttonBenchmark.Enabled = true;
            buttonStartMining.Enabled = true;
            buttonSettings.Enabled = true;
            devicesListViewEnableControl1.IsMining = false;
            buttonStopMining.Enabled = false;

            if (DemoMode) DemoMode = false;

            UpdateGlobalRate();
        }

        ///////////////////////////////////////
        // Miner control functions
        private enum StartMiningReturnType
        {
            StartMining,
            ShowNoMining,
            IgnoreMsg
        }

        private void UpdateStatusLabel(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            StatusLabel.Text = (string)e.Argument;
        }
    }
}